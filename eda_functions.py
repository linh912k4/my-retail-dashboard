# -*- coding: utf-8 -*-
"""eda_functions

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OGHCvBN2tJClbILkEXUdhUU8TrR4nRX8
"""

import streamlit as st # Thêm dòng này để st được nhận diện trong file này
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
import io # Đảm bảo io cũng được import

warnings.filterwarnings('ignore')

# Thêm 'st' vào danh sách tham số của hàm
def run_eda(df_path='final_dataset.csv', st=st): # Đổi thành 'data/'
    # Phần còn lại của hàm giữ nguyên
    df = pd.read_csv(df_path)
    # ... (các dòng code còn lại của hàm run_eda)

    st.subheader("1. Tổng quan Dữ liệu")
    st.write("---")
    st.write("### 1.1. Thông tin Dataset")
    st.write("Kích thước dữ liệu:", df.shape)
    buffer = io.StringIO()
    df.info(buf=buffer)
    s = buffer.getvalue()
    st.text(s)

    st.write("### 1.2. Mô tả thống kê")
    st.dataframe(df.describe(include='all'))

    st.write("### 1.3. Missing Values & Duplicates")
    st.write("**Missing values per column:**")
    st.dataframe(df.isnull().sum().to_frame(name='Missing Count'))
    st.write("**Missing value percent per column:**")
    st.dataframe((df.isnull().mean() * 100).to_frame(name='Missing Percent'))
    st.write(f"**Number of duplicate rows:** {df.duplicated().sum()}")
    df = df.drop_duplicates()
    st.write(f"Dataset after dropping duplicates: {df.shape[0]} rows")
    st.write("---")

    st.subheader("2. Phân tích Phân phối Biến số Liên tục")
    st.write("---")
    fig1, axs1 = plt.subplots(1, 4, figsize=(20, 4))
    sns.histplot(df['Quantity_Sold'], bins=30, ax=axs1[0], color='#0057B8')
    axs1[0].set_title('Units Sold')
    sns.histplot(df['Price'], bins=30, ax=axs1[1], color='#B22222')
    axs1[1].set_title('Price')
    sns.histplot(df['Stock_Level'], bins=30, ax=axs1[2], color='#008B8B')
    axs1[2].set_title('Stock Level')
    # Kiểm tra nếu 'Promo_ID' tồn tại và có giá trị khác 'No Promo'
    if 'Promo_ID' in df.columns and any(df['Promo_ID'] != 'No Promo'):
        sns.histplot(df['Promo_Budget'][df['Promo_ID'] != 'No Promo'], bins=30, ax=axs1[3], color='#FF7300')
        axs1[3].set_title('Promo Budget (Promo only)')
    else:
        axs1[3].set_title('Promo Budget (No Promo Data)')
    plt.tight_layout()
    st.pyplot(fig1)

    fig2, axs2 = plt.subplots(1, 3, figsize=(16, 4))
    sns.boxplot(y=df['Quantity_Sold'], ax=axs2[0], color='#0057B8')
    axs2[0].set_title('Units Sold')
    sns.boxplot(y=df['Price'], ax=axs2[1], color='#B22222')
    axs2[1].set_title('Price')
    if 'Promo_ID' in df.columns and any(df['Promo_ID'] != 'No Promo'):
        sns.boxplot(y=df['Promo_Budget'][df['Promo_ID'] != 'No Promo'], ax=axs2[2], color='#FF7300')
        axs2[2].set_title('Promo Budget (Promo only)')
    else:
        axs2[2].set_title('Promo Budget (No Promo Data)')
    plt.tight_layout()
    st.pyplot(fig2)
    st.write("---")

    st.subheader("3. Phân tích Hiệu suất Cửa hàng")
    st.write("---")
    store_performance = df.groupby('Store_Location')['Quantity_Sold'].sum().sort_values(ascending=False)
    fig3 = plt.figure(figsize=(12, 6))
    sns.barplot(x=store_performance.values, y=store_performance.index, palette='viridis')
    plt.title('Store Performance Ranking by Units Sold', fontsize=16)
    plt.xlabel('Total Units Sold')
    plt.ylabel('Store Location')
    plt.tight_layout()
    st.pyplot(fig3)
    st.write("---")

    st.subheader("4. Phân tích Khuyến mãi")
    st.write("---")
    # Mapping code sang tên
    promo_map = {1: 'Discount', 2: 'Trade-in'}
    df['Promo_Type'] = df['Promo_Type_Code'].map(promo_map)
    promo_df = df[df['Promo_Type_Code'].isin([1, 2])].copy() # Ensure promo_df is defined

    # QUAN TRỌNG: Thêm các dòng này NGAY SAU khi tạo promo_df
    # Đảm bảo cột 'Date' là datetime
    promo_df['Date'] = pd.to_datetime(promo_df['Date'])
    # Tạo cột YearMonth trên promo_df
    promo_df['YearMonth'] = promo_df['Date'].dt.to_period('M')
    
    if not promo_df.empty:
        # ... (các phần code tiếp theo, bao gồm đoạn gây lỗi ở dòng 119) ...
        # Calculate the frequency of each promotion type, excluding 'No Promo' (Promo_Type_Code 0)
        promo_count = promo_df[promo_df['Promo_Type_Code'] != 0]['Promo_Type_Code'].value_counts()
        # ... (phần code Promotion Type Frequency) ...
    
        st.write("### Promotion Activity Throughout the Year")
        # Không cần dòng này nữa nếu đã tạo promo_df['YearMonth'] ở trên
        # df['Date'] = pd.to_datetime(df['Date'])
        # df['YearMonth'] = df['Date'].dt.to_period('M')
    
        # Aggregate monthly promo data
        # Dòng này bây giờ sẽ hoạt động vì promo_df đã có cột YearMonth
        monthly_promo = promo_df.groupby('YearMonth').agg(
            num_promotion=('Promo_ID', 'nunique'), # Count unique promo IDs
            total_budget=('Promo_Budget', 'sum')
        ).reset_index()


        if not monthly_promo.empty:
            fig5, ax1 = plt.subplots(figsize=(12, 6))
            sns.barplot(x=monthly_promo['YearMonth'].astype(str), y=monthly_promo['num_promotion'],
                        color='#0057B8', ax=ax1)
            ax1.set_xlabel('Month')
            ax1.set_ylabel('Number of Promotions', color='#0057B8')
            ax1.tick_params(axis='y', labelcolor='#0057B8')
            plt.xticks(rotation=45)
            ax2 = ax1.twinx()
            sns.lineplot(x=monthly_promo['YearMonth'].astype(str), y=monthly_promo['total_budget'],
                        color='#FF7300', marker='o', linewidth=2.5, ax=ax2)
            ax2.set_ylabel('Total Promotion Budget', color='#FF7300')
            ax2.tick_params(axis='y', labelcolor='#FF7300')
            plt.title('Promotion Activity Throughout the Year')
            plt.tight_layout()
            st.pyplot(fig5)
        else:
            st.write("No monthly promotion activity data to display.")

        st.write("### Average Units Sold by Promotion Type")
        avg_units_by_promo = promo_df[promo_df['Promo_Type_Code'] != 0].groupby('Promo_Type_Code')['Quantity_Sold'].mean()
        if not avg_units_by_promo.empty:
            fig6 = plt.figure(figsize=(8, 5))
            sns.barplot(x=avg_units_by_promo.index.astype(str), y=avg_units_by_promo.values,
                        palette=['#008B8B', '#4B0082', '#0057B8', '#B22222', '#FF7300'])
            plt.xlabel('Promotion Type')
            plt.ylabel('Average Units Sold')
            plt.title('Average Units Sold by Promotion Type')
            st.pyplot(fig6)
        else:
            st.write("No promotion data available for average units sold by promo type.")

        st.write("### Number of Times Each Promotion Type Was Used")
        promo_counts = promo_df['Promo_Type'].value_counts().sort_index()
        if not promo_counts.empty:
            fig7 = plt.figure(figsize=(6, 4))
            sns.barplot(x=promo_counts.index, y=promo_counts.values,
                        palette=['#0057B8', '#FF7300'])
            plt.title('Number of Times Each Promotion Type Was Used')
            plt.xlabel('Promotion Type')
            plt.ylabel('Number of Uses')
            plt.tight_layout()
            st.pyplot(fig7)
        else:
            st.write("No promotion type usage data available.")

        st.write("### Promotion Budget Distribution by Promo Type")
        if not promo_df.empty:
            fig_boxplot = plt.figure(figsize=(8, 6))
            sns.boxplot(data=promo_df, x='Promo_Type', y='Promo_Budget', palette=['#B22222', '#0057B8'])
            plt.title('Promotion Budget Distribution by Promo Type')
            plt.xlabel('Promotion Type')
            plt.ylabel('Promotion Budget (VND)')
            plt.tight_layout()
            st.pyplot(fig_boxplot)

            fig_violinplot = plt.figure(figsize=(8, 6))
            sns.violinplot(data=promo_df, x='Promo_Type', y='Promo_Budget', palette=['#B22222', '#0057B8'], inner='box')
            plt.title('Promotion Budget Distribution by Promo Type (Violin Plot)')
            plt.xlabel('Promotion Type')
            plt.ylabel('Promotion Budget (VND)')
            plt.tight_layout()
            st.pyplot(fig_violinplot)
        else:
            st.write("No promotion budget distribution data available.")

        st.write("### Correlation: Monthly Promo Budget vs Units Sold")
        promo_df['Date'] = pd.to_datetime(promo_df['Date'])
        promo_df['YearMonth'] = promo_df['Date'].dt.to_period('M')
        monthly_promo_corr = promo_df.groupby('YearMonth').agg(
            monthly_promo_budget=('Promo_Budget', 'sum'),
            monthly_units_sold=('Quantity_Sold', 'sum')
        ).reset_index()
        if not monthly_promo_corr.empty:
            fig_regplot = plt.figure(figsize=(8, 6))
            sns.regplot(data=monthly_promo_corr, x='monthly_promo_budget', y='monthly_units_sold',
                        scatter_kws={'s': 70, 'color': '#0057B8'}, line_kws={'color': '#B22222', 'lw': 2})
            plt.title('Correlation: Monthly Promo Budget vs Units Sold')
            plt.xlabel('Monthly Promo Budget (VND)')
            plt.ylabel('Monthly Units Sold')
            plt.tight_layout()
            st.pyplot(fig_regplot)
        else:
            st.write("No data for Monthly Promo Budget vs Units Sold correlation.")
    else:
        st.write("No promotion data available in the dataset for detailed analysis.")
    st.write("---")

    st.subheader("5. Phân tích Doanh số theo Thời gian & Brand")
    st.write("---")
    st.write("### Total Units Sold by Month")
    df['Date'] = pd.to_datetime(df['Date']) # Ensure Date is datetime
    monthly = df.groupby(['Year', 'Month'])['Quantity_Sold'].sum().reset_index()
    monthly['YearMonth'] = monthly['Year'].astype(str) + '-' + monthly['Month'].astype(str).str.zfill(2)
    fig8 = plt.figure(figsize=(14, 5))
    sns.lineplot(data=monthly, x='YearMonth', y='Quantity_Sold', marker='o', color='#0057B8')
    plt.title('Total Units Sold by Month')
    plt.ylabel('Units Sold')
    plt.xlabel('Month')
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig8)

    st.write("### Monthly Units Sold Trend by Performance Tier")
    store_perf = df.groupby('Store_Location')['Quantity_Sold'].sum().sort_values(ascending=False)
    tier_labels = ['High', 'Medium', 'Low']
    store_perf_tier = pd.qcut(store_perf, q=3, labels=tier_labels, duplicates='drop')
    df['Performance_Tier'] = df['Store_Location'].map(store_perf_tier)
    df['YearMonth'] = df['Date'].dt.to_period('M')
    monthly_tier_trend = df.groupby(['YearMonth', 'Performance_Tier'])['Quantity_Sold'].sum().reset_index()
    fig9 = plt.figure(figsize=(12, 6))
    sns.lineplot(data=monthly_tier_trend, x=monthly_tier_trend['YearMonth'].astype(str),
                 y='Quantity_Sold', hue='Performance_Tier', marker='o',
                 palette=['#B22222', '#0057B8', '#808080'])
    plt.title('Monthly Units Sold Trend by Performance Tier')
    plt.xlabel('Month')
    plt.ylabel('Total Units Sold')
    plt.xticks(rotation=45)
    plt.legend(title='Performance Tier')
    plt.tight_layout()
    st.pyplot(fig9)

    st.write("### Total Units Sold of Apple vs Samsung by Year")
    brand_year = df.groupby(['Year', 'Brand'])['Quantity_Sold'].sum().reset_index()
    brand_year_pivot = brand_year.pivot(index='Year', columns='Brand', values='Quantity_Sold').fillna(0)
    fig10 = plt.figure(figsize=(10, 6))
    brand_year_pivot.plot(kind='bar', figsize=(10, 6), width=0.8, color=['#0057B8', '#B22222'], ax=fig10.gca())
    plt.title('Total Units Sold of Apple vs Samsung by Year', fontsize=15)
    plt.xlabel('Year', fontsize=13)
    plt.ylabel('Total Units Sold', fontsize=13)
    plt.xticks(rotation=0)
    plt.legend(title='Brand')
    plt.tight_layout()
    st.pyplot(fig10)

    st.write("### Monthly Revenue (All Brands) 2023-2024 (Million VND)")
    df['Date'] = pd.to_datetime(df['Date'])
    df['YearMonth'] = df['Date'].dt.to_period('M').astype(str)
    monthly_revenue = df.groupby('YearMonth')['Revenue'].sum().reset_index()
    fig11 = plt.figure(figsize=(12, 7))
    plt.plot(monthly_revenue['YearMonth'], monthly_revenue['Revenue'],
             marker='o', color='green', linewidth=2)
    plt.title('Monthly Revenue (All Brands) 2023-2024 (Million VND)', fontsize=15)
    plt.xlabel('Month', fontsize=13)
    plt.ylabel('Revenue (Million VND)', fontsize=13)
    plt.xticks(rotation=45)
    plt.grid(alpha=0.2)
    plt.tight_layout()
    st.pyplot(fig11)

    st.write("---")
    st.subheader("6. Phân tích Khuyến mãi theo Brand")
    st.write("---")

    st.write("### Promotion Type Frequency by Brand")
    promo_brand_counts = promo_df.groupby(['Brand', 'Promo_Type']).size().reset_index(name='Count')
    if not promo_brand_counts.empty:
        fig12 = plt.figure(figsize=(8, 6))
        sns.barplot(data=promo_brand_counts, x='Promo_Type', y='Count', hue='Brand',
                    palette=['#B22222', '#0057B8'])
        plt.title('Promotion Type Frequency by Brand')
        plt.xlabel('Promotion Type')
        plt.ylabel('Frequency')
        plt.legend(title='Brand')
        plt.tight_layout()
        st.pyplot(fig12)
    else:
        st.write("No promotion type frequency by brand data available.")

    return df # Return the processed DataFrame for further use
